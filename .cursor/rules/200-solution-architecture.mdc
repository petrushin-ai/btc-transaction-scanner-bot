---
description: General solution architecture
alwaysApply: false
---
# Architecture

This rule summarizes the implemented architecture and points to single sources of truth to avoid duplication. For operational commands, envs, and deep dives, see the linked docs.

## Tech stack (concise)

- Bun 1.1+ runtime, TypeScript (strict, ESM)
- Docker image based on `oven/bun:1.1`
- Logging via Pino with pretty option in development
- Env loading and validation with `.env*` files
- Bitcoin Core–compatible JSON‑RPC client
- Currency rates via CoinMarketCap with file cache

Details: see Architecture in `README.md`.

## Clean layering

- `src/types` – domain types and interfaces
- `src/application` – orchestration services (`BitcoinService`, `CurrencyService`, `HealthCheckService`) and helpers
- `src/infrastructure` – adapters (Bitcoin RPC, logger, storage, currency client, raw parser)
- `src/config` – env loading and schema
- `src/example` – runnable examples

Refer to the Architecture section in `README.md` for an expanded overview.

## Key services and behavior

- Bitcoin service: connects to node, awaits new blocks, parses (raw path gated by `PARSE_RAW_BLOCKS`), matches watched addresses, optionally resolves inputs when `RESOLVE_INPUT_ADDRESSES=true`.
- Currency service: fetches and caches BTC→USD using CoinMarketCap; applied once per block.
- Logger: structured JSON to stdout and files; JSON‑array files by default, NDJSON opt‑in.

Event shapes and examples are defined in `README.md` under “JSON Notification Format”.

## Configuration (authoritative list in README)

- Core: `BTC_RPC_API_URL`, `BITCOIN_RPC_USER`, `BITCOIN_RPC_PASSWORD`, `BITCOIN_POLL_INTERVAL_MS`
- Features: `PARSE_RAW_BLOCKS`, `RESOLVE_INPUT_ADDRESSES`
- Watch list: `WATCH_ADDRESSES_FILE` (preferred JSON file), fallback `WATCH_ADDRESSES` (CSV)
- Logger: `APP_ENV/NODE_ENV`, `LOG_LEVEL`, `LOG_PRETTY`, `LOG_SERVICE_NAME`
- Currency: `API_KEY_COINMARKETCAP`, `COINMARKETCAP_BASE_URL`, `CUR_CACHE_VALIDITY_PERIOD`

See “Environment variables” in `README.md` for defaults and examples.

## Data flow

1) Load config → 2) Init `BitcoinRpcClient` → 3) `BitcoinService.connect()` → 4) await/parse block (raw or verbose) → 5) `checkTransactions` against watched set → 6) emit JSON events via logger.

## Storage abstraction

All filesystem IO is routed through `FileStorageService` and helpers. Current usages include logger destinations, currency cache, and watch‑list file loading. Implementation and rationale are documented in `README.md` (File storage abstraction).

## Raw parsing and scripts

The raw parser components live under `src/infrastructure/bitcoin/raw/*`. For binary formats, script types, and performance considerations, see `docs/BTC_RAW_PARSER.md`.

## Logger details

Logger behavior, formats (JSON‑array vs NDJSON), destinations, and redaction are covered in `docs/LOGGER.md`.

## Testing and NFRs

Test strategy, metrics summary, and performance/scalability targets are captured in `README.md` under “Testing”. CI/JUnit options are also listed there.

## Optimizations reference

Recent performance‑focused changes and rationale are tracked in `docs/OPTIMIZATIONS.MD`.

## Single sources of truth

- `README.md` – commands, envs, architecture overview, JSON formats, testing
- `docs/BTC_RAW_PARSER.md` – raw parsing internals
- `docs/LOGGER.md` – logger API and behavior
- `docs/OPTIMIZATIONS.MD` – performance notes

This rule intentionally avoids restating those documents; update the docs above when behavior changes.